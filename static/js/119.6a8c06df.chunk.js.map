{"version":3,"file":"static/js/119.6a8c06df.chunk.js","mappings":"qMAoBA,EAXmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,EAAAA,OAASC,UACrBH,EAAAA,EAAAA,KAACI,EAAAA,GAAO,CAACC,GAAIP,EACJQ,gBAAiBJ,EAAAA,EAAAA,OAASC,SACjCN,EAAMU,QAGpB,ECPA,EAJgB,SAACV,GACb,OAAOG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUE,SAAEN,EAAMW,SAC5C,E,oBCPaC,EAAqB,SAACC,GAAuB,OAAKA,EAAMC,aAAaC,OAAO,EAE5EC,EAAsB,SAACH,GAAuB,OAAKA,EAAMC,aAAaG,QAAQ,E,iDCI9EC,EAAgF,SAAHC,GAAyB,IAApBC,EAAaD,EAAbC,cAErFC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXC,WAAY,IAEhBC,iBAAkBC,EAAAA,GAAW,CACzBF,WAAYE,EAAAA,KAAaC,IAAI,GAAI,mCAErCC,SAAU,SAAAC,GACNT,EAAc,CAACU,eAAgBD,EAAOL,aACtCH,EAAOU,WACX,IAGJ,OACIC,EAAAA,EAAAA,MAAA,QAAMJ,SAAUP,EAAOY,aAAa3B,SAAA,EAChC0B,EAAAA,EAAAA,MAAA,OAAA1B,SAAA,EACIH,EAAAA,EAAAA,KAAA,YAAA+B,EAAAA,EAAAA,GAAA,CACIhC,GAAG,aACHiC,YAAY,sBACRd,EAAOe,cAAc,gBAE5Bf,EAAOgB,OAAOb,YAAcH,EAAOiB,QAAQd,aACxCrB,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,EAAAA,mBAAqBC,SAAEe,EAAOgB,OAAOb,iBAE7DrB,EAAAA,EAAAA,KAAA,OAAAG,UACIH,EAAAA,EAAAA,KAAA,UAAQoC,KAAK,SAAQjC,SAAC,aAMtC,ECEA,GAAekC,EAAAA,EAAAA,IAhCW,WAEtB,IAAMzB,GAAU0B,EAAAA,EAAAA,IAAe7B,GACzB8B,GAAeD,EAAAA,EAAAA,IAAezB,GAE9B2B,GAAWC,EAAAA,EAAAA,MAEXC,EAAa9B,EAAQ+B,KAAI,SAAAC,GAAC,OAC5B5C,EAAAA,EAAAA,KAAC6C,EAAU,CAAYtC,KAAMqC,EAAErC,KAAMR,GAAI6C,EAAE7C,IAA1B6C,EAAE7C,GAA6B,IAG9Ce,EAAWyB,EAAaI,KAAI,SAAAG,GAAC,OAC/B9C,EAAAA,EAAAA,KAAC+C,EAAO,CAAYvC,QAASsC,EAAEtC,QAAST,GAAI+C,EAAE/C,IAAhC+C,EAAE/C,GAAmC,IAOvD,OACI8B,EAAAA,EAAAA,MAAA,OAAK5B,UAAWC,EAAAA,EAAAA,QAAUC,SAAA,EACtBH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,EAAAA,WAAaC,SACxBuC,KAELb,EAAAA,EAAAA,MAAA,OAAK5B,UAAWC,EAAAA,EAAAA,SAAWC,SAAA,CACtBW,GACDd,EAAAA,EAAAA,KAACe,EAAc,CAACE,cAXN,SAAC+B,GACnBR,GAASS,EAAAA,EAAAA,GAAaD,EAASrB,gBACnC,SAaJ,G,sHCnCO,SAASU,EAAoDa,GAEhE,OAAO,SAACrD,GAIJ,OAFeyC,EAAAA,EAAAA,IAAea,EAAAA,KAIvBnD,EAAAA,EAAAA,KAACkD,GAASnB,EAAAA,EAAAA,GAAA,GAAKlC,KAFFG,EAAAA,EAAAA,KAACoD,EAAAA,GAAQ,CAAC/C,GAAG,UAGrC,CACJ,C","sources":["Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Redux/selectors/dialogs-selectors.ts","Components/Dialogs/AddMessageForm.tsx","Components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["import React from 'react';\r\nimport s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogItemPropsType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path}\r\n                     activeClassName={s.active}\r\n            >{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\n\r\nexport type MessagePropsType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return <div className=\"s.dialog\">{props.message}</div>\r\n}\r\n\r\nexport default Message;","import {AppRootStateType} from \"../store\";\r\n\r\nexport const getDialogsSelector = (state: AppRootStateType) => state.messagesPage.dialogs\r\n\r\nexport const getMessagesSelector = (state: AppRootStateType) => state.messagesPage.messages","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport s from \"./Dialogs.module.css\";\r\n\r\nexport type FormDataType = {\r\n    newMessageBody: string\r\n}\r\nexport const AddMessageForm: React.FC<{ addNewMessage: (formData: FormDataType) => void }> = ({addNewMessage}) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newMessage: ''\r\n        },\r\n        validationSchema: Yup.object({\r\n            newMessage: Yup.string().max(50, 'Must be 50 characters or less')\r\n        }),\r\n        onSubmit: values => {\r\n            addNewMessage({newMessageBody: values.newMessage})\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <textarea\r\n                    id='newMessage'\r\n                    placeholder='Enter your message'\r\n                    {...formik.getFieldProps('newMessage')}\r\n                />\r\n                {formik.errors.newMessage && formik.touched.newMessage &&\r\n                    <div className={s.commonErrorMessage}>{formik.errors.newMessage}</div>}\r\n            </div>\r\n            <div>\r\n                <button type='submit'>\r\n                    Send\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppSelector} from \"Redux/store\";\r\nimport {getDialogsSelector, getMessagesSelector} from \"Redux/selectors/dialogs-selectors\";\r\nimport {addMessageAC} from \"Redux/Reducers/dialogs-reducer\";\r\nimport {withAuthRedirect} from \"hoc/withAuthRedirect\";\r\nimport {AddMessageForm, FormDataType} from \"./AddMessageForm\";\r\n\r\nconst Dialogs: React.FC = () => {\r\n\r\n    const dialogs = useAppSelector(getDialogsSelector)\r\n    const messagesData = useAppSelector(getMessagesSelector)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const dialogItem = dialogs.map(d =>\r\n        <DialogItem key={d.id} name={d.name} id={d.id}/>\r\n    )\r\n\r\n    const messages = messagesData.map(m =>\r\n        <Message key={m.id} message={m.message} id={m.id}/>\r\n    )\r\n\r\n    const addNewMessage = (formData: FormDataType) => {\r\n        dispatch(addMessageAC(formData.newMessageBody))\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItem}>\r\n                {dialogItem}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messages}\r\n                <AddMessageForm addNewMessage={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withAuthRedirect(Dialogs)","import React, {ComponentType} from 'react'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useAppSelector} from \"Redux/store\";\r\nimport {getIsAuth} from \"Redux/selectors/auth-selectors\";\r\n\r\n\r\nexport function withAuthRedirect<T extends JSX.IntrinsicAttributes>(Component: ComponentType<T>) {\r\n\r\n    return (props: T) => {\r\n\r\n        const isAuth = useAppSelector(getIsAuth)\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <Component {...props}/>\r\n    }\r\n}"],"names":["props","path","id","_jsx","className","s","children","NavLink","to","activeClassName","name","message","getDialogsSelector","state","messagesPage","dialogs","getMessagesSelector","messages","AddMessageForm","_ref","addNewMessage","formik","useFormik","initialValues","newMessage","validationSchema","Yup","max","onSubmit","values","newMessageBody","resetForm","_jsxs","handleSubmit","_objectSpread","placeholder","getFieldProps","errors","touched","type","withAuthRedirect","useAppSelector","messagesData","dispatch","useDispatch","dialogItem","map","d","DialogItem","m","Message","formData","addMessageAC","Component","getIsAuth","Redirect"],"sourceRoot":""}