{"version":3,"file":"static/js/488.8e4aaf1d.chunk.js","mappings":"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","sources":["pages/chatPage/ChatPage.tsx"],"sourcesContent":["import React, {memo, useEffect, useRef, useState} from 'react';\r\nimport {ChatMessageAPIType} from \"api/chat-api\";\r\nimport {useAppDispatch, useAppSelector} from \"Redux/store\";\r\nimport {sendMessage, startChatListening, stopChatListening} from \"Redux/Reducers/chat-reducer\";\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <Chat/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n    const chatStatus = useAppSelector(state => state.chat.status)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(startChatListening())\r\n        return () => {\r\n            dispatch(stopChatListening())\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            {chatStatus === 'error' && <div>Reconnect failed. Refresh a page</div>}\r\n                <>\r\n                    <Messages/>\r\n                    <AddMessage/>\r\n                </>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Messages: React.FC = () => {\r\n\r\n    const messages = useAppSelector(state => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n    useEffect(()=>{\r\n        isAutoScroll && messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n    }, [messages])\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 50) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{height: '450px', overflowY: 'auto'}} onScroll={scrollHandler}>\r\n            {messages.map((m: ChatMessageAPIType, index) => <Message key={index} message={m}/>)}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = memo(({message}) => {\r\n\r\n    return (\r\n        <div>\r\n            <img width={'30px'} src={message.photo} alt='avatar'/> <b>{message.userName}</b>\r\n            <br/>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddMessage: React.FC = () => {\r\n\r\n    const [text, setText] = useState('')\r\n\r\n    const chatStatus = useAppSelector(state => state.chat.status)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!text) {\r\n            return\r\n        }\r\n        dispatch(sendMessage(text))\r\n        setText('')\r\n    }\r\n\r\n    const onKeyDownHandler = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.shiftKey && e.key === 'Enter') {\r\n            sendMessageHandler()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea onKeyDown={onKeyDownHandler} value={text} onChange={(e) => setText(e.currentTarget.value)}></textarea>\r\n            </div>\r\n            <div>\r\n                <button disabled={chatStatus !== 'ready'} onClick={sendMessageHandler}>Send\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatPage;"],"names":["Chat","chatStatus","useAppSelector","state","chat","status","dispatch","useAppDispatch","useEffect","startChatListening","stopChatListening","_jsxs","children","_jsx","_Fragment","Messages","AddMessage","messages","messagesAnchorRef","useRef","_useState","useState","_useState2","_slicedToArray","isAutoScroll","setIsAutoScroll","_messagesAnchorRef$cu","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","ref","memo","_ref","width","src","photo","alt","userName","_useState3","_useState4","text","setText","sendMessageHandler","sendMessage","onKeyDown","shiftKey","key","value","onChange","disabled","onClick"],"sourceRoot":""}