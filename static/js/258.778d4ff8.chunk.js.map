{"version":3,"file":"static/js/258.778d4ff8.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/Components/Profile/Profile.module.css?0b4f","webpack://samurai-way/./src/Components/Profile/ProfileInfo/ProfileInfo.module.css?9a7c","Redux/selectors/profile-selectors.ts","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/ProfileDataForm.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/Components/Profile/MyPosts/MyPosts.module.css?0d10","webpack://samurai-way/./src/Components/Profile/MyPosts/Post/Post.module.css?a988","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/AddPostForm.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Profile_item__j3Pq5\"};","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"ProfileInfo_avatar__jpOAr\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__aGnXK\",\"changeAvatarInput\":\"ProfileInfo_changeAvatarInput__u1dVL\",\"contact\":\"ProfileInfo_contact__QmFES\",\"profileForm\":\"ProfileInfo_profileForm__miy9t\"};","import {AppRootStateType} from \"../store\";\r\nimport {PostsDataType} from \"../Reducers/profile-reducer\";\r\nimport {DomainProfileDataType} from \"api/profile-api\";\r\n\r\nexport const getProfileSelector = (state: AppRootStateType): DomainProfileDataType | null => state.profilePage.profile\r\nexport const getProfileStatusSelector = (state: AppRootStateType): string => state.profilePage.status\r\nexport const getPostsSelector = (state: AppRootStateType): PostsDataType[] => state.profilePage.posts","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {updateUserStatus} from \"Redux/Reducers/profile-reducer\";\r\nimport {useAppDispatch, useAppSelector} from \"Redux/store\";\r\nimport {getProfileStatusSelector} from \"Redux/selectors/profile-selectors\";\r\n\r\nexport const ProfileStatusWithHooks: React.FC = () => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [localStatus, setLocalStatus] = useState('')\r\n\r\n    const status = useAppSelector(getProfileStatusSelector)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        dispatch(updateUserStatus(localStatus))\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setLocalStatus(status)\r\n    }, [status])\r\n\r\n    return (\r\n        editMode\r\n            ?\r\n            <div>\r\n                <input onChange={onChangeStatus}\r\n                       onBlur={offEditMode}\r\n                       value={localStatus}\r\n                       autoFocus/>\r\n            </div>\r\n            :\r\n            <div>\r\n                <b>Status: </b><span onDoubleClick={onEditMode}>{status || \"Status is not defined\"}</span>\r\n            </div>\r\n    );\r\n}\r\n","import React, {FC} from \"react\";\r\nimport {FormikValues, ProfileDataType} from \"./ProfileInfo\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup'\r\n\r\ntype ProfileDataFormType = Omit<ProfileDataType, 'isOwner' | 'activateEditMode'> & {\r\n    onSubmit: (values: FormikValues) => void\r\n}\r\n\r\nexport const ProfileDataForm: FC<ProfileDataFormType> = ({profile, onSubmit}) => {\r\n\r\n    const formik = useFormik({\r\n            initialValues: {\r\n                fullName: profile.fullName,\r\n                aboutMe: profile.aboutMe,\r\n                lookingForAJob: profile.lookingForAJob,\r\n                lookingForAJobDescription: profile.lookingForAJobDescription,\r\n                contacts: {\r\n                    facebook: profile.contacts.facebook,\r\n                    website: profile.contacts.website,\r\n                    vk: profile.contacts.vk,\r\n                    twitter: profile.contacts.twitter,\r\n                    instagram: profile.contacts.instagram,\r\n                    youtube: profile.contacts.youtube,\r\n                    github: profile.contacts.github,\r\n                    mainLink: profile.contacts.mainLink\r\n                }\r\n            },\r\n            validationSchema:\r\n\r\n                Yup.object().shape({\r\n                    contacts: Yup.object().shape({\r\n                        facebook: Yup.string().url(),\r\n                        website: Yup.string().url(),\r\n                        vk: Yup.string().url(),\r\n                        twitter: Yup.string().url(),\r\n                        instagram: Yup.string().url(),\r\n                        youtube: Yup.string().url(),\r\n                        github: Yup.string().url(),\r\n                        mainLink: Yup.string().url(),\r\n                    })\r\n                }),\r\n            onSubmit: values => {\r\n                // @ts-ignore\r\n                onSubmit(values)\r\n            },\r\n        })\r\n    ;\r\n    return (\r\n        <form className={s.profileForm} onSubmit={formik.handleSubmit}>\r\n            <label htmlFor=\"fullName\">Full name </label>\r\n            <input\r\n                id=\"fullName\"\r\n                type=\"text\"\r\n                {...formik.getFieldProps('fullName')}\r\n            />\r\n            <label htmlFor=\"aboutMe\">About me </label>\r\n            <input\r\n                id=\"aboutMe\"\r\n                type=\"textarea\"\r\n                {...formik.getFieldProps('aboutMe')}\r\n            />\r\n            <label htmlFor=\"lookingForAJob\">Looking for a job </label>\r\n            <input\r\n                id=\"lookingForAJob\"\r\n                type=\"checkbox\"\r\n                {...formik.getFieldProps('lookingForAJob')}\r\n            />\r\n            <label htmlFor=\"lookingForAJobDescription\">My skills </label>\r\n            <input\r\n                id=\"lookingForAJobDescription\"\r\n                type=\"textarea\"\r\n                {...formik.getFieldProps('lookingForAJobDescription')}\r\n            />\r\n\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key} className={s.contact}>\r\n                    <label>{key}</label>\r\n                    <input\r\n                        id={\"contacts.\" + key}\r\n                        type=\"text\"\r\n                        {...formik.getFieldProps('contacts.' + key)}\r\n                    />\r\n                </div>\r\n            })}\r\n            </div>\r\n\r\n            <button type=\"submit\">Save</button>\r\n        </form>\r\n    );\r\n}\r\n\r\n","import React, {ChangeEvent, FC, useState} from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport profileLogo from \"assets/images/logo_1.png\"\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport {ProfileDataForm} from \"./ProfileDataForm\";\r\nimport {useAppDispatch, useAppSelector} from \"Redux/store\";\r\nimport {getProfileSelector} from \"Redux/selectors/profile-selectors\";\r\nimport {savePhoto, saveProfile} from \"Redux/Reducers/profile-reducer\";\r\nimport {ContactsType} from \"api/profile-api\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    isOwner: boolean\r\n}\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = ({isOwner}) => {\r\n\r\n    const profile = useAppSelector(getProfileSelector)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onAvatarSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            dispatch(savePhoto(e.target.files[0]))\r\n        }\r\n    }\r\n\r\n    const profilePhoto = profile.photos.large || profileLogo\r\n\r\n    const onSubmit = (values: FormikValues) => {\r\n        dispatch(saveProfile(values))\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div>\r\n                    <img className={s.avatar}\r\n                         src={profilePhoto} alt={''}/>\r\n                    {isOwner &&\r\n                        <input className={s.changeAvatarInput}\r\n                               type='file'\r\n                               onChange={onAvatarSelected}/>\r\n                    }\r\n                </div>\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData isOwner={isOwner} profile={profile} activateEditMode={() => setEditMode(true)}/>}\r\n\r\n\r\n                <ProfileStatusWithHooks />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// @ts-ignore\r\nexport type FormikValues = Pick<ProfileDataType, 'aboutMe'\r\n    | 'lookingForAJob'\r\n    | 'lookingForAJobDescription'\r\n    | 'fullName'> & ContactsType\r\n\r\nexport type ProfileDataType = {\r\n    profile: {\r\n        aboutMe: string\r\n        contacts: ContactsType\r\n        lookingForAJob: boolean\r\n        lookingForAJobDescription: string\r\n        fullName: string\r\n        userId: number\r\n    }\r\n    isOwner: boolean\r\n    activateEditMode: () => void\r\n}\r\n\r\nconst ProfileData: FC<ProfileDataType> = ({profile, isOwner, activateEditMode}) => {\r\n    return <div>\r\n        <div>\r\n            {isOwner && <button onClick={activateEditMode}>Edit</button>}\r\n        </div>\r\n        <div>\r\n            <b>Full name:</b> {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>About me:</b> {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job:</b> {profile.lookingForAJob ? 'yes' : 'no'}\r\n        </div>\r\n        {profile.lookingForAJob && <div>\r\n            <b>My skills:</b> {profile.lookingForAJobDescription}\r\n        </div>}\r\n        <div>\r\n            <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n            // @ts-ignore\r\n            return <Contact key={key} title={key} value={profile.contacts[key]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype ContactProps = { title: string, value: string | null }\r\n\r\nconst Contact: FC<ContactProps> = ({title, value}) => {\r\n    return <div className={s.contact}><b>{title}:</b>{' ' + value}</div>\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MyPosts_content__C+XWJ\",\"textareaBlock\":\"MyPosts_textareaBlock__Pr2uP\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__lcRuh\"};","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\nimport postIcon from \"../../../../assets/images/photo-small.jpg\"\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n};\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src={postIcon} alt={''}/>\r\n            {props.message}\r\n            <div>\r\n                <span>{props.likesCount} like</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport s2 from \"../../Dialogs/Dialogs.module.css\";\r\n\r\nexport type FormDataType = {\r\n    newPostBody: string\r\n}\r\nexport const AddPostForm: React.FC<{ addNewPost: (value: FormDataType) => void }> = React.memo(({addNewPost}) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newPost: ''\r\n        },\r\n        validationSchema: Yup.object({\r\n            newPost: Yup.string().max(30, 'Must be 30 characters or less')\r\n        }),\r\n        onSubmit: values => {\r\n            addNewPost({newPostBody: values.newPost})\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <textarea\r\n                    id=\"newPost\"\r\n                    placeholder={'Enter your text'}\r\n                    {...formik.getFieldProps('newPost')}\r\n                />\r\n                {formik.errors.newPost && formik.touched.newPost &&\r\n                    <div className={s2.commonErrorMessage}>{formik.errors.newPost}</div>}\r\n            </div>\r\n            <div>\r\n                <button type='submit'>New post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n})","import React, {useCallback} from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {AddPostForm, FormDataType} from \"./AddPostForm\";\r\nimport {useAppDispatch, useAppSelector} from \"Redux/store\";\r\nimport {getPostsSelector} from \"Redux/selectors/profile-selectors\";\r\nimport {addPostAC} from \"Redux/Reducers/profile-reducer\";\r\n\r\nexport const MyPosts: React.FC = React.memo(() => {\r\n\r\n    const postsData = useAppSelector(getPostsSelector)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const posts = postsData.map(p =>\r\n        <Post key={p.id} message={p.message} likesCount={p.likesCount}/>\r\n    )\r\n\r\n    const addNewPost = useCallback((values: FormDataType) => {\r\n        if (values.newPostBody.trim() !== '') {\r\n            dispatch(addPostAC(values.newPostBody))\r\n        }\r\n    }, [addPostAC])\r\n\r\n    return <div className={s.content}>\r\n        <div>\r\n            <h3>My posts</h3>\r\n            <div className={s.textareaBlock}>\r\n                <AddPostForm addNewPost={addNewPost}/>\r\n            </div>\r\n        </div>\r\n        {posts}\r\n    </div>\r\n})","import React from \"react\";\r\nimport s from \"./Profile.module.css\"\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPosts} from \"./MyPosts/MyPosts\";\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n}\r\n\r\nexport const Profile: React.FC<PropsType> = (props) => {\r\n\r\n    return <div className={s.content}>\r\n        <ProfileInfo isOwner={props.isOwner}/>\r\n        <MyPosts/>\r\n    </div>\r\n}","import React, {ComponentType, useEffect} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {getProfile, getUserStatus} from \"Redux/Reducers/profile-reducer\";\r\nimport {useAppDispatch, useAppSelector} from \"Redux/store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"hoc/withAuthRedirect\";\r\nimport {getProfileId} from \"../../Redux/selectors/auth-selectors\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamsType>\r\n\r\nconst ProfileContainer: React.FC<ProfileContainerPropsType> = ({match}) => {\r\n\r\n    const authorizedUserID = useAppSelector(getProfileId)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const refreshProfile = () => {\r\n        let userID = '';\r\n        let chosenUserID = match.params.userId\r\n        if (authorizedUserID) {\r\n            userID = chosenUserID ? chosenUserID : authorizedUserID\r\n        }\r\n        dispatch(getProfile(userID))\r\n        dispatch(getUserStatus(userID))\r\n    }\r\n\r\n    useEffect(()=>{\r\n        refreshProfile()\r\n    })\r\n\r\n\r\n        return (\r\n            <Profile isOwner={!match.params.userId}/>\r\n        )\r\n\r\n}\r\n\r\nexport default compose<ComponentType>(withRouter, withAuthRedirect)(ProfileContainer)\r\n","import React, {ComponentType} from 'react'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useAppSelector} from \"Redux/store\";\r\nimport {getIsAuth} from \"Redux/selectors/auth-selectors\";\r\n\r\n\r\nexport function withAuthRedirect<T extends JSX.IntrinsicAttributes>(Component: ComponentType<T>) {\r\n\r\n    return (props: T) => {\r\n\r\n        const isAuth = useAppSelector(getIsAuth)\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <Component {...props}/>\r\n    }\r\n}"],"names":["getProfileSelector","state","profilePage","profile","getProfileStatusSelector","status","getPostsSelector","posts","ProfileStatusWithHooks","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","_useState4","localStatus","setLocalStatus","useAppSelector","dispatch","useAppDispatch","useEffect","_jsx","children","onChange","e","currentTarget","value","onBlur","updateUserStatus","autoFocus","_jsxs","onDoubleClick","ProfileDataForm","_ref","onSubmit","formik","useFormik","initialValues","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","validationSchema","Yup","shape","url","values","className","s","handleSubmit","htmlFor","_objectSpread","id","type","getFieldProps","Object","keys","map","key","ProfileInfo","isOwner","Preloader","profilePhoto","photos","large","profileLogo","src","alt","target","files","length","savePhoto","saveProfile","ProfileData","activateEditMode","_ref2","onClick","Contact","title","_ref3","props","message","likesCount","AddPostForm","React","addNewPost","newPost","max","newPostBody","resetForm","placeholder","errors","touched","s2","MyPosts","postsData","p","Post","useCallback","trim","addPostAC","Profile","compose","withRouter","withAuthRedirect","match","authorizedUserID","getProfileId","userID","chosenUserID","params","userId","getProfile","getUserStatus","refreshProfile","Component","getIsAuth","Redirect","to"],"sourceRoot":""}