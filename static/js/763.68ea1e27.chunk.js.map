{"version":3,"file":"static/js/763.68ea1e27.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/Components/Profile/Profile.module.css?0b4f","webpack://samurai-way/./src/Components/Profile/ProfileInfo/ProfileInfo.module.css?9a7c","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/Components/Profile/MyPosts/MyPosts.module.css?0d10","webpack://samurai-way/./src/Components/Profile/MyPosts/Post/Post.module.css?a988","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Profile_item__j3Pq5\"};","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"ProfileInfo_avatar__jpOAr\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__aGnXK\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [localStatus, setLocalStatus] = useState('')\r\n\r\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(localStatus)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setLocalStatus(props.status)\r\n    }, [props.status])\r\n\r\n    return (\r\n        editMode\r\n            ?\r\n            <div>\r\n                <input onChange={onChangeStatus}\r\n                       onBlur={offEditMode}\r\n                       value={localStatus}\r\n                       autoFocus/>\r\n            </div>\r\n            :\r\n            <div>\r\n                <span onDoubleClick={onEditMode}>{props.status || \"Status is not defined\"}</span>\r\n            </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport profileLogo from \"../../../assets/images/logo_1.png\"\r\nimport {ProfileType} from \"../../../Redux/Reducers/profile-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({profile, status, updateStatus}) => {\r\n\r\n    if (profile === null) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const profilePhoto = profile.photos.large ? profile.photos.large : profileLogo\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div>\r\n                    <img className={s.avatar}\r\n                         src={profilePhoto} alt={''}/>\r\n                </div>\r\n                <span><strong>{profile?.fullName}</strong></span>\r\n                <ProfileStatusWithHooks status={status}\r\n                               updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MyPosts_content__C+XWJ\",\"textareaBlock\":\"MyPosts_textareaBlock__Pr2uP\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__lcRuh\"};","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\nimport postIcon from \"../../../../assets/images/photo-small.jpg\"\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n};\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src={postIcon} alt={''}/>\r\n            {props.message}\r\n            <div>\r\n                <span>{props.likesCount} like</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport s2 from \"../../common/FormsControls/FormControl.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostPropsType} from \"./MyPostsContainer\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from 'yup';\r\n\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const MyPosts = React.memo((props: MyPostPropsType) => {\r\n\r\n    const posts = props.postsData.map(p =>\r\n        <Post key={p.id} message={p.message} likesCount={p.likesCount}/>\r\n    )\r\n\r\n    const addNewPost = (values: FormDataType) => {\r\n        if (values.newPostBody.trim() !== '') {\r\n            props.addPost(values.newPostBody)\r\n        }\r\n    }\r\n\r\n    return <div className={s.content}>\r\n        <div>\r\n            <h3>My posts</h3>\r\n            <div className={s.textareaBlock}>\r\n                <AddPostForm addNewPost={addNewPost}/>\r\n            </div>\r\n        </div>\r\n        {posts}\r\n    </div>\r\n})\r\n\r\nexport type FormDataType = {\r\n    newPostBody: string\r\n}\r\n\r\nconst AddPostForm: React.FC<{ addNewPost: (value: FormDataType) => void }> = ({addNewPost}) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newPost: ''\r\n        },\r\n        validationSchema: Yup.object({\r\n            newPost: Yup.string().max(30, 'Must be 30 characters or less')\r\n        }),\r\n        onSubmit: values => {\r\n            addNewPost({newPostBody: values.newPost})\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <textarea\r\n                    id=\"newPost\"\r\n                    placeholder={'Enter your text'}\r\n                    {...formik.getFieldProps('newPost')}\r\n                />\r\n                {formik.errors.newPost && formik.touched.newPost &&\r\n                    <div className={s2.commonErrorMessage}>{formik.errors.newPost}</div>}\r\n            </div>\r\n            <div>\r\n                <button type='submit'>New post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React from \"react\";\r\nimport {addPostAC} from \"../../../Redux/Reducers/profile-reducer\";\r\nimport {MyPosts, PostType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../Redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    postsData: Array<PostType>\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (text: string) => void\r\n}\r\n\r\nexport type MyPostPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        postsData: state.profilePage.posts,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (text: string) => {\r\n            dispatch(addPostAC(text));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect (mapStateToProps, mapDispatchToProps) (MyPosts);","import React from \"react\";\r\nimport s from \"./Profile.module.css\"\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../Redux/Reducers/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return <div className={s.content}>\r\n        <ProfileInfo profile={props.profile}\r\n                     status={props.status}\r\n                     updateStatus={props.updateStatus}/>\r\n        <MyPostsContainer/>\r\n    </div>\r\n}\r\n\r\nexport default Profile;","import React, {Component, ComponentType} from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getProfile, getUserStatus, ProfileType, updateUserStatus} from \"../../Redux/Reducers/profile-reducer\";\r\nimport {AppRootStateType} from \"../../Redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamsType> & allPropsType\r\n\r\nclass ProfileContainer extends Component<ProfileContainerPropsType> {\r\n\r\n    componentDidMount() {\r\n        let userID = '';\r\n        let chosenUserID = this.props.match.params.userId\r\n        if (this.props.authorizedUserID) {\r\n            userID = chosenUserID ? chosenUserID : this.props.authorizedUserID\r\n        }\r\n        this.props.getProfile(userID)\r\n        this.props.getUserStatus(userID)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateUserStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\ntype allPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\ntype mapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserID: string | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getProfile: (userID: string) => void\r\n    getUserStatus: (userID: string) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppRootStateType): mapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserID: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {getProfile, getUserStatus, updateUserStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n","import React, {ComponentType} from 'react'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../Redux/redux-store\";\r\n\r\ntype mstpType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mstp = (state: AppRootStateType): mstpType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: mstpType) => {\r\n\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    };\r\n\r\n    return connect(mstp)(RedirectComponent)\r\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","localStatus","setLocalStatus","useEffect","status","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","onDoubleClick","profile","Preloader","profilePhoto","photos","large","profileLogo","className","s","src","alt","fullName","message","likesCount","MyPosts","React","posts","postsData","map","p","id","AddPostForm","addNewPost","values","newPostBody","trim","addPost","formik","useFormik","initialValues","newPost","validationSchema","Yup","max","onSubmit","resetForm","handleSubmit","placeholder","getFieldProps","errors","touched","s2","type","connect","state","profilePage","dispatch","text","addPostAC","MyPostsContainer","ProfileContainer","userID","chosenUserID","this","match","params","userId","authorizedUserID","getProfile","getUserStatus","updateUserStatus","Component","compose","auth","isAuth","withRouter","withAuthRedirect","mstp","restProps","to","_objectWithoutProperties","source","excluded","key","i","target","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}